{\rtf1\ansi\ansicpg1251\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 \uc0\u1051 \u1072 \u1073  6\
\uc0\u1047 \u1072 \u1076 \u1072 \u1095 \u1072  1 \u1089 ++\
\

\f1\b0 #include <iostream>\
#include <cmath>\
using namespace std;\
\
double f(double x1, double x2) \{\
    return x1 * x1 + 3 * x2 * x2 + cos(x1 + x2);\
\}\
\
int main() \{\
    double x1 = 0.0, x2 = 0.0; // \uc0\u1053 \u1072 \u1095 \u1072 \u1083 \u1100 \u1085 \u1099 \u1077  \u1079 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1103  \u1087 \u1077 \u1088 \u1077 \u1084 \u1077 \u1085 \u1085 \u1099 \u1093 \
    double step = 0.01; // \uc0\u1064 \u1072 \u1075  \u1076 \u1083 \u1103  \u1087 \u1086 \u1080 \u1089 \u1082 \u1072 \
    double tol = 1e-6; // \uc0\u1090 \u1086 \u1095 \u1085 \u1086 \u1089 \u1090 \u1100 \
\
 \
    while (true) \{\
        double f_old = f(x1, x2);\
        double x1_new = x1, x2_new = x2;\
\
        // \uc0\u1055 \u1086 \u1080 \u1089 \u1082  \u1087 \u1086  x1\
        double x1_temp = x1 - step;\
        if (f(x1_temp, x2) < f_old) \{\
            x1_new = x1_temp;\
        \} else \{\
            x1_temp = x1 + step;\
            if (f(x1_temp, x2) < f_old) \{\
                x1_new = x1_temp;\
            \}\
        \}\
\
        // \uc0\u1055 \u1086 \u1080 \u1089 \u1082  \u1087 \u1086  x2\
        double x2_temp = x2 - step;\
        if (f(x1, x2_temp) < f_old) \{\
            x2_new = x2_temp;\
        \} else \{\
            x2_temp = x2 + step;\
            if (f(x1, x2_temp) < f_old) \{\
                x2_new = x2_temp;\
            \}\
        \}\
\
        // \uc0\u1055 \u1088 \u1086 \u1074 \u1077 \u1088 \u1082 \u1072  \u1085 \u1072  \u1089 \u1093 \u1086 \u1076 \u1080 \u1084 \u1086 \u1089 \u1090 \u1100 \
        if (abs(x1_new - x1) < tol && abs(x2_new - x2) < tol) \{\
            cout << "\uc0\u1054 \u1087 \u1090 \u1080 \u1084 \u1072 \u1083 \u1100 \u1085 \u1086 \u1077  \u1088 \u1077 \u1096 \u1077 \u1085 \u1080 \u1077 : x1 = " << x1_new << ", x2 = " << x2_new << endl;\
            cout << "\uc0\u1047 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1077  \u1092 \u1091 \u1085 \u1082 \u1094 \u1080 \u1080 : " << f(x1_new, x2_new) << endl;\
            break;\
        \}\
\
        x1 = x1_new;\
        x2 = x2_new;\
    \}\
\
    return 0;\
\}\
\

\f0\b \uc0\u1047 \u1072 \u1076 \u1072 \u1095 \u1072  2 \u1087 \u1080 \u1090 \u1086 \u1085 
\f1\b0 \
\
import numpy as np\
\
def f(x):\
    x1, x2 = x\
    return 7*x1**2 + 2*x1*x2 + 5*x2**2 + x1 - 10*x2\
\
def grad_f(x):\
    x1, x2 = x\
    return np.array([14*x1 + 2*x2 + 1, 2*x1 - 10])\
\
# \uc0\u1052 \u1077 \u1090 \u1086 \u1076  \u1085 \u1072 \u1080 \u1089 \u1082 \u1086 \u1088 \u1077 \u1081 \u1096 \u1077 \u1075 \u1086  \u1089 \u1087 \u1091 \u1089 \u1082 \u1072 \
def gradient_descent(x0, alpha, epsilon, max_iter):\
    x = x0\
    iter_count = 0\
    while True:\
        grad = grad_f(x)\
        if np.linalg.norm(grad) < epsilon:\
            break\
        x = x - alpha * grad\
        iter_count += 1\
        if iter_count > max_iter:\
            break\
    return x\
\
x0 = np.array([1.0, 1.0])\
\
# \uc0\u1055 \u1072 \u1088 \u1072 \u1084 \u1077 \u1090 \u1088 \u1099  \u1072 \u1083 \u1075 \u1086 \u1088 \u1080 \u1090 \u1084 \u1072 \
alpha = 0.01  # \uc0\u1064 \u1072 \u1075  \u1075 \u1088 \u1072 \u1076 \u1080 \u1077 \u1085 \u1090 \u1085 \u1086 \u1075 \u1086  \u1089 \u1087 \u1091 \u1089 \u1082 \u1072 \
epsilon = 1e-6  # \uc0\u1058 \u1086 \u1095 \u1085 \u1086 \u1089 \u1090 \u1100  \u1089 \u1093 \u1086 \u1076 \u1080 \u1084 \u1086 \u1089 \u1090 \u1080 \
max_iter = 1000  # \uc0\u1052 \u1072 \u1082 \u1089 \u1080 \u1084 \u1072 \u1083 \u1100 \u1085 \u1086 \u1077  \u1095 \u1080 \u1089 \u1083 \u1086  \u1080 \u1090 \u1077 \u1088 \u1072 \u1094 \u1080 \u1081 \
\
# \uc0\u1055 \u1086 \u1080 \u1089 \u1082  \u1086 \u1087 \u1090 \u1080 \u1084 \u1091 \u1084 \u1072 \
x_opt = gradient_descent(x0, alpha, epsilon, max_iter)\
print("\uc0\u1054 \u1087 \u1090 \u1080 \u1084 \u1072 \u1083 \u1100 \u1085 \u1086 \u1077  \u1088 \u1077 \u1096 \u1077 \u1085 \u1080 \u1077 :", x_opt)\
print("\uc0\u1047 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1077  \u1092 \u1091 \u1085 \u1082 \u1094 \u1080 \u1080  \u1074  \u1086 \u1087 \u1090 \u1080 \u1084 \u1072 \u1083 \u1100 \u1085 \u1086 \u1081  \u1090 \u1086 \u1095 \u1082 \u1077 :", f(x_opt))\
}